//https://practice.geeksforgeeks.org/problems/first-negative-integer-in-every-window-of-size-k3345/1
//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws IOException
	{
	        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int t =
            Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            long a[] = new long[(int)(n)];
            // long getAnswer[] = new long[(int)(n)];
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = Long.parseLong(inputLine[i]);
            }
            int k = Integer.parseInt(br.readLine().trim());
            
            Compute obj = new Compute();
            long answer[] = obj.printFirstNegativeInteger(a, n, k);
            int sz = answer.length;
            
            StringBuilder output = new StringBuilder();
            for(int i=0;i<sz;i++)
                output.append(answer[i]+" ");
            System.out.println(output);
            
        }
	}
}


// } Driver Code Ends


//User function Template for Java


class Compute {
    
    public long[] printFirstNegativeInteger(long A[], int N, int K)
    {
        Deque<Integer>q=new LinkedList<>();
        int index=0;
        ArrayList<Integer>list=new ArrayList<>();
        long arr[]=new long[K*2];
        for(int i=0;i<K;i++)
        {
            if(A[i]<0)
              q.addLast(i);
        }
        //System.out.println(A[q.peek()]);
        if(q.size()>0)
        {
            list.add((int)A[q.peekFirst()]);
            
        }
        
        else
        {
            list.add(0);
        }
        //System.out.println(list.get(0));
        //System.out.println(arr[0]);
        for(int i=K;i<N;i++)
        {
            if(!q.isEmpty() && (i-q.peek())>=K)
            {
                q.removeFirst();
            }
            if(A[i]<0)
            {
                q.addLast(i);
            }
            if(q.size()>0)
            {
                list.add((int)A[q.peek()]);
                
            }
            
            else
            {
                list.add(0);
            }
        }
        long ar[]=new long[list.size()];
        for(int i=0;i<list.size();i++)
        {
            ar[i]=list.get(i);
        }
            
         
        return ar;    
        }
        
}
