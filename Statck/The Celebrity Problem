//https://practice.geeksforgeeks.org/problems/the-celebrity-problem/1
//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*; 

class GFG{
    public static void main(String args[]) throws IOException { 
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t>0)
        {
            int N = sc.nextInt();
            int M[][] = new int[N][N];
            for(int i=0; i<N; i++)
            {
                for(int j=0; j<N; j++)
                {
                    M[i][j] = sc.nextInt();
                }
            }
            System.out.println(new Solution().celebrity(M,N));
            t--;
        }
    } 
} 
// } Driver Code Ends


//User function Template for Java


class Solution
{ 
    //Function to find if there is a celebrity in the party or not.
    public static boolean knows(int m[][],int a,int b)
    {
        if(m[a][b]==1)
        {
            return true;
        }
        return false;
    }
    public static boolean verify(int m[][],int n,int a)
    {
        int row=0;
    
        for(int i=0;i<n;i++)
        {
            if(m[a][i]==0)
            {
                row++;
            }
        }
        int col=0;
        for(int i=0;i<n;i++)
        {
            if(m[i][a]==1)
            {
                col++;
            }
        }
        if(row==n && col==n-1)
        {
            return true;
        }
        return false;
    }
    int celebrity(int M[][], int n)
    {
        Stack<Integer>stack=new Stack<>();
        
    	for(int i=0;i<n;i++)
    	{
    	    stack.push(i);
    	        
    	}
        while(stack.size()>1)
        {
            int a=stack.peek();
            stack.pop();
            int b=stack.peek();
            stack.pop();
            if(knows(M,a,b))
            {
                stack.push(b);
            }
            if
            {
                stack.push(a);
            }
        }
    	if(verify(M,n,stack.peek()))
    	{
    	    return stack.peek();
    	}
    	return -1;
    	
    }
}
