//https://leetcode.com/problems/minimum-falling-path-sum/description/
class Solution {
    static int sum=Integer.MAX_VALUE,a=0;
    static int getMaxUtil(int i, int j, int m, int[][] matrix,int[][] dp){
    
    // Base Conditions
    if(j<0 || j>=m)
        return (int)Math.pow(10,9);
    if(i==0)
        return matrix[0][j];
    
    if(dp[i][j]!=-1) return dp[i][j];
    
    int up = matrix[i][j] + getMaxUtil(i-1,j,m,matrix,dp);
    int leftDiagonal = matrix[i][j] + getMaxUtil(i-1,j-1,m,matrix,dp);
    int rightDiagonal = matrix[i][j] + getMaxUtil(i-1,j+1,m,matrix,dp);
    
    return dp[i][j]= Math.min(up,Math.min(leftDiagonal,rightDiagonal));
    
}

    public int minFallingPathSum(int[][] matrix) {
       int n = matrix.length;
    int m = matrix[0].length;
    
    int dp[][]= new int[n][m];
    for(int row[]: dp)
    Arrays.fill(row,-1);
    
    int maxi = Integer.MAX_VALUE;
    
    for(int j=0; j<m;j++){
        int ans = getMaxUtil(n-1,j,m,matrix,dp);
        maxi = Math.min(maxi,ans);
    }
    
    return maxi;
   }
      
      
    
}
