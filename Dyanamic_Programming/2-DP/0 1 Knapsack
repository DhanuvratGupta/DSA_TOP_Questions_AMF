import java.util.* ;
import java.io.*; 

public class Solution{
    
    public static int find(int dp[][],int[] weight, int[] value, int n, int cap,int index)
    {
       //base case
       if(index==0)
       {
           if(weight[0]<=cap)
           {
              return value[0];
           }
           return 0;
       }
       if(dp[index][cap]!=-1)
       {
           return dp[index][cap];
       }
       //include
       int include=0;
       if(weight[index]<=cap)
       {
          include=value[index]+find(dp,weight,value,n,cap-weight[index],index-1);
       }
       
       //exclude
       int exclude=0+find(dp,weight,value,n,cap,index-1);
       dp[index][cap]=Math.max(include,exclude);
       return dp[index][cap];
    }
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
       int dp[][]=new int[maxWeight+1][maxWeight+1];
       for(int i=0;i<n+1;i++)
       {
           Arrays.fill(dp[i],-1);
       }
       return find(dp,weight,value,n,maxWeight,n-1);
       
    }
}
