//{ Driver Code Starts
// driver

import java.util.*;

class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

class GfG{
    
    static void printList(Node n){
        while(n!=null){
            System.out.print(n.data+" ");
            n = n.next;
        }
        System.out.println();
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        
        while (T-- > 0) {
            
            int n = sc.nextInt();
            int val = sc.nextInt();
            
            Node first = new Node(val);
            Node tail = first;
            for(int i=0; i<n-1; i++)
            {
                val = sc.nextInt();
                tail.next = new Node(val);
                tail = tail.next;
            }
            
            int m = sc.nextInt();
            val = sc.nextInt();
            
            Node second = new Node(val);
            tail = second;
            for(int i=0; i<m-1; i++)
            {
                val = sc.nextInt();
                tail.next = new Node(val);
                tail = tail.next;
            }
            
            Solution g = new Solution();
            Node res = g.addTwoLists(first, second);
            printList(res);
        }
    }
}

// } Driver Code Ends


/* node for linked list

class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

*/

class Solution{
    //Function to add two numbers represented by linked list.
    static Node addTwoLists(Node first, Node second){
        Node pre=null;
        Node mynode=new Node(-1);
        Node tmp=mynode;
        Node curr=first;
        Node nxt=null;
        while(curr!=null)
        {
            nxt=curr.next;
            curr.next=pre;
            pre=curr;
            curr=nxt;
        }
        curr=second;
        Node pre1=null;
        nxt=null;
        while(curr!=null)
        {
            nxt=curr.next;
            curr.next=pre1;
            pre1=curr;
            curr=nxt;
        }
        
        int i=0;
        while(pre!=null && pre1!=null)
        {
            Node n=new Node((pre.data+pre1.data+i)%10);
            //System.out.println(pre.data+" "+pre1.data+" "+i);
            if(pre.data+pre1.data+i>=10)
            {
                
                i=(pre.data+pre1.data+i)/10;
            }
            else
            {
                i=0;
            }
            tmp.next=n;
            tmp=tmp.next;
            pre=pre.next;
            pre1=pre1.next;
            
        }
        while(pre!=null)
        {
            Node n=new Node((pre.data+i)%10);
            
            if(pre.data+i>=10)
            {
                
                i=(pre.data+i)/10;
            }
            else
            {
                i=0;
            }
            tmp.next=n;
            tmp=tmp.next;
            pre=pre.next;
        }
        while(pre1!=null)
        {
            Node n=new Node((pre1.data+i)%10);
            //System.out.println(pre1.data+" "+i);
            if(pre1.data+i>=10)
            {
               
                i=(pre1.data+i)/10;
            }
            else
            {
                i=0;
            }
            tmp.next=n;
            tmp=tmp.next;
            pre1=pre1.next;
        }
        if(i>0)
        {
            Node n=new Node(i);
            tmp.next=n;;
        }
        tmp=mynode.next;
        curr=tmp;
        Node pre2=null;
        nxt=null;
        while(curr!=null)
        {
            nxt=curr.next;
            curr.next=pre2;
            pre2=curr;
            curr=nxt;
        }
        
        return pre2;
    }
}
