//https://takeuforward.org/data-structure/boundary-traversal-of-a-binary-tree/
//https://www.codingninjas.com/codestudio/problems/boundary-traversal_790725?utm_source=youtube&utm_medium=affiliate&utm_campaign=Striver_Tree_Videos&leftPanelTab=1
import java.util.* ;
import java.io.*; 
/************************************************************

    Following is the Binary Tree node structure:
    
   class TreeNode {
	    int data;
	    TreeNode left;
	    TreeNode right;

	    TreeNode(int data) {
		    this.data = data;
		    this.left = null;
		    this.right = null;
	    }

    }

************************************************************/

import java.util.ArrayList;

public class Solution {
    
    public static void find_left(TreeNode root,ArrayList<Integer>list)
    {
        TreeNode tmp=root.left;
        while(tmp!=null)
        {
            if(isLeaf(tmp)==false)
                list.add(tmp.data);
            if(tmp.left!=null)
                tmp=tmp.left;
            else
                tmp=tmp.right;
         }
     }
    public static void find_right(TreeNode root,ArrayList<Integer>list)
    {
        ArrayList<Integer>cur=new ArrayList<>();
        TreeNode tmp=root.left;
        while(tmp!=null)
        {
            if(isLeaf(tmp)==false)
                cur.add(tmp.data);
            if(tmp.right!=null)
                tmp=tmp.right;
            else
                tmp=tmp.left;
         }
        for(int i=cur.size()-1;i>=0;i--)
        {
            list.add(cur.get(i));
        }
    }
    public static void find_leaf(TreeNode root,ArrayList<Integer>list)
    {
        if(isLeaf(root))
            list.add(root.data);
        if(root.left!=null)
            find_left(root.left,list);
        if(root.right!=null)
            find_left(root.right,list);
    }
    public static boolean isLeaf(TreeNode root)
    {
        if(root.left==null && root.right==null)
        {
            return true;
        }
        return false;
    }
	public static ArrayList<Integer> traverseBoundary(TreeNode root){
        
        ArrayList<Integer>list=new ArrayList<>();
        if(isLeaf(root))
        {
            list.add(root.data);
            return list;
        }
        find_left(root,list);
        find_leaf(root,list);
        find_right(root,list);
        System.out.println(list);
        return list;
	}
}
                                                                OR

import java.util.* ;
import java.io.*; 
/************************************************************

   Following is the Binary Tree node structure:
   
  class TreeNode {
    int data;
    TreeNode left;
    TreeNode right;

    TreeNode(int data) {
     this.data = data;
     this.left = null;
     this.right = null;
    }

   }

************************************************************/
class Solution {
   TreeNode root;
 

   public static boolean isLeaf(TreeNode node)
   {
       if (node.left == null && node.right == null) {
           return true;
       }
       return false;
   }

   public static void addLeftBound(TreeNode root,
                           ArrayList<Integer> ans)
   {
       // Go left left and no left then right but again
       // check from left
       root = root.left;
       while (root != null) {
           if (!isLeaf(root)) {
               ans.add(root.data);
           }

           if (root.left != null) {
               root = root.left;
           }
           else {
               root = root.right;
           }
       }
   }

   public static void addRightBound(TreeNode root,
                           ArrayList<Integer> ans)
   {
       // Go right right and no right then left but again
       // check from right
       root = root.right;
       // As we need the reverse of this for Anticlockwise
       Stack<Integer> stk = new Stack<>();
       while (root != null) {
           if (!isLeaf(root)) {
               stk.push(root.data);
           }
           if (root.right != null) {
               root = root.right;
           }
           else {
               root = root.left;
           }
       }

       while (!stk.isEmpty()) {
           ans.add(stk.peek());
           stk.pop();
       }
   }

   // its kind of inorder
   public static void addLeaves(TreeNode root,
                       ArrayList<Integer> ans)
   {
       if (root == null) {
           return;
       }

       if (isLeaf(root)) {
           ans.add(root.data); // just store leaf nodes
           return;
       }

       addLeaves(root.left, ans);
       addLeaves(root.right, ans);
   }

   public static ArrayList<Integer> traverseBoundary(TreeNode root)
   {
       ArrayList<Integer> ans = new ArrayList<>();
       if (root == null) {
           return ans;
       }

       if (!isLeaf(root)) {
           ans.add(root.data); // if leaf then its done by
                               // addLeaves
       }

       addLeftBound(root, ans);
       addLeaves(root, ans);
       addRightBound(root, ans);
       return ans;
}
}
