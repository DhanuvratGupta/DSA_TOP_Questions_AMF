//https://leetcode.com/problems/binary-tree-maximum-path-sum/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public int diameter_sum(TreeNode root,int max[])
    {
        if(root==null)
            return 0;
        
        int left=Math.max(0,diameter_sum(root.left,max));
        int right=Math.max(0,diameter_sum(root.right,max));
        //System.out.println(left+" "+right+" "+root.val);
        max[0]=Math.max(max[0],left+right+root.val);
        
        
        return Math.max(right,left)+root.val;
    }
    public int maxPathSum(TreeNode root) {
        if(root.left==null && root.right==null)
        {
            return root.val;
        }
        int max[]=new int[1];
        max[0]=Integer.MIN_VALUE;
        diameter_sum(root,max);
        return max[0];
    }
}
