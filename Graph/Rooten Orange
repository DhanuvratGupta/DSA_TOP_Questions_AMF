class Solution {
    class node{
      int row;
      int col;
      int time;
      node(int row,int col,int time)
      {
        this.row=row;
        this.col=col;
        this.time=time;
      }
    }
    public int orangesRotting(int[][] grid) {
        Queue<node>q=new LinkedList<>();
        
        for(int i=0;i<grid.length;i++)
        {
          for(int j=0;j<grid[0].length;j++)
          {
            if(grid[i][j]==2)
            {
              q.add(new node(i,j,0));
              
            }
          }
        }
        int a[]={-1,0,1,0};
        int b[]={0,1,0,-1};
        int count=0,pre=0;
        while(!q.isEmpty())
        {
          int r=q.peek().row;
          int c=q.peek().col;
          int t=q.peek().time;
          count=t;
          System.out.println(count);
          q.remove();
          for(int i=0;i<4;i++)
          {
            int nrow=r+a[i];
            int ncol=c+b[i];
            if(nrow>=0 && nrow<grid.length &&ncol>=0 && ncol<grid[0].length && grid[nrow][ncol]==1)
            {
               q.add(new node(nrow,ncol,t+1));
               grid[nrow][ncol]=2;
             }
          }
          
        }
        for(int i=0;i<grid.length;i++)
        {
          for(int j=0;j<grid[0].length;j++)
          {
            if(grid[i][j]==1)
            {
              return -1;
            }
          }
        }
        return count;
    }
}
